{"version":3,"sources":["App.js","MarqueeWhenOverflowText.js","Timer.js","SubathonDisplay.js","index.js"],"names":["App","useState","status","setStatus","goals","twitchUsername","initialMinutes","secondsPerSub","secondsPerBit","secondsPerPenny","config","setConfig","useEffect","configQuery","URLSearchParams","window","location","search","get","configDecoded","Buffer","from","jsonConfig","JSON","parse","subsThisStream","setSubsThisStream","totalTimeAddedThisStream","setTotalTimeAddedThisStream","Date","now","subathonEndDate","setSubathonEndDate","timeLastAdded","setTimeLastAdded","addSeconds","numberOfSeconds","getTime","socket","useRef","current","WebSocket","onopen","send","getRandomNickname","onerror","onclose","close","onmessage","data","startsWith","console","log","includes","messagePart","split","messageContent","substring","indexOf","subathonResetMatch","match","addSubsMatch","addMinutesMatch","numberOfSubs","parseInt","error","Math","floor","random","length","undefined","MarqueeWhenOverflowText","props","text","children","overflowing","setOverflowing","thisComponent","calculateTextWidth","offsetWidth","ref","gradient","speed","formatTime","totalSeconds","hours","abs","toString","padStart","minutes","seconds","RecentlyAddedTime","styled","span","LowTime","CriticalTime","Normal","Timer","endDate","recentlyAddedTime","setRecentlyAddedTime","countdownString","setCountdownString","lowTime","setLowTime","criticalTime","setCriticalTime","interval","setInterval","clearInterval","SubathonNextGoalText","div","SubathonText","SubathonTimer","SubathonTop","SubathonProgress","ProgressLabels","SubathonContainer","SubathonDisplay","achievedGoal","sortedGoals","Object","entries","sort","x","filter","currentGoal","defaultReturnValue","Infinity","className","ProgressBar","animated","min","max","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b03ff1dc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport SubathonDisplay from \"./SubathonDisplay\";\n\nfunction App() {\n\n  const [status, setStatus] = useState(\"Loading...\");\n\n  const [config, setConfig] = useState({\n    goals: {},\n    twitchUsername: \"\",\n    initialMinutes: 0,\n    secondsPerSub: 0,\n    secondsPerBit: 0,\n    secondsPerPenny: 0\n  });\n\n  useEffect(() => {\n    const query = new URLSearchParams(window.location.search);\n    const configQuery = query.get('config')\n    const configDecoded = Buffer.from(configQuery, \"base64\");\n    const jsonConfig = JSON.parse(configDecoded);\n    setConfig(jsonConfig);\n  }, []);\n\n  const [subsThisStream, setSubsThisStream] = useState(0);\n  const [totalTimeAddedThisStream, setTotalTimeAddedThisStream] = useState(0);\n  const [subathonEndDate, setSubathonEndDate] = useState(new Date(Date.now() + config.initialMinutes * 60 * 1000));\n  const [timeLastAdded, setTimeLastAdded] = useState(new Date(0)); // Beginning of time\n\n  const addSubs = (numberOfSubs) => {\n    setSubsThisStream(subsThisStream + numberOfSubs);\n    addSeconds(numberOfSubs * config.secondsPerSub);\n  }\n\n  const addSeconds = (numberOfSeconds) => {\n    if (numberOfSeconds > 0) {\n      setTimeLastAdded(Date.now());\n    }\n    setSubathonEndDate(new Date(subathonEndDate.getTime() + numberOfSeconds * 1000));\n    setTotalTimeAddedThisStream(totalTimeAddedThisStream + numberOfSeconds);\n  }\n\n  useEffect(() => {\n    setSubathonEndDate(new Date((Date.now() + config.initialMinutes * 60 * 1000) + (totalTimeAddedThisStream * 1000)));\n    // eslint-disable-next-line\n  }, [config]);\n\n  const socket = useRef(null);\n\n  useEffect(() => {\n    socket.current = new WebSocket(\"wss://irc-ws.chat.twitch.tv/\");\n\n    socket.current.onopen = () => {\n      setStatus(\"Connecting...\");\n      // \"Login\" with anonymous username\n      socket.current.send(\"NICK \" + getRandomNickname());\n\n      setStatus(\"Joining Twitch chat...\");\n      // Join the Twitch chat of the requested user\n      socket.current.send(\"JOIN #\" + config.twitchUsername);\n\n      setStatus(\"\");\n    };\n\n    socket.current.onerror = () => {\n      setStatus(\"ðŸ›‘ Connection to Twitch Chat Error ðŸ›‘\");\n    }\n\n    socket.current.onclose = () => {\n      setStatus(\"ðŸ›‘ Connection to Twitch Closed ðŸ›‘\");\n    }\n\n    // Specify how to clean up after this effect:\n    return () => {\n      socket.current.close();\n    };\n  }, [config]);\n\n  useEffect(() => {\n\n    if (!socket.current) return;\n\n    socket.current.onmessage = ({ data }) => {\n      // Need to handle \"PING\" messages to keep the socket connection alive\n      if (data.startsWith(\"PING :tmi.twitch.tv\")) {\n        console.log(\"Received a PING, sending back PONG\");\n        socket.current.send(\"PONG :tmi.twitch.tv\");\n        return;\n      }\n      // These are the messages sent by chatters - we need to process these\n      else if (data.includes(\"PRIVMSG\")) {\n        const messagePart = data.split(\"#\")[1];\n        const messageContent = messagePart\n          .substring(messagePart.indexOf(\":\") + 1)\n          .split(\"\\r\\n\")[0];\n        const username = data.split(\"@\")[1].split(\".tmi.twitch.tv\")[0];\n\n        switch (username) {\n          case config.twitchUsername:\n            const subathonResetMatch = messageContent.match(/!subathonreset/i);\n            const addSubsMatch = messageContent.match(/!addsubs (\\d+)/i);\n            const addMinutesMatch = messageContent.match(/!addminutes (\\d+)/i);\n            if (subathonResetMatch) {\n              setConfig({ ...config })\n            }\n            if (addSubsMatch) {\n              addSubs(parseInt(addSubsMatch[1]));\n            }\n            if (addMinutesMatch) {\n              addSeconds(parseInt(addMinutesMatch[1] * 60));\n            }\n            break;\n          case \"streamelements\":\n\n            break;\n          default:\n            break;\n        }\n\n        return;\n      }\n      // Some common messages sent when first connecting that we don't care about\n      else if (\n        data.includes(\"Welcome\") ||\n        data.includes(\"JOIN\") ||\n        data.includes(\"NAMES\")\n      ) {\n        console.log(\"Received a known, ignored, message\", data);\n      }\n      // Log everything else as error to the console\n      else {\n        console.error(\"Unhandled message\", data);\n        return;\n      }\n    };\n  });\n\n\n\n\n  const getRandomNickname = () => {\n    // Anonymous access to Twitch via websockets is available using username \"justinfan\" followed by a random number\n    const min = 9999;\n    const max = 99999;\n    const randomNumber = Math.floor(Math.random() * (max - min)) + min;\n    return \"justinfan\" + randomNumber;\n  };\n\n  return <>\n    {status.length > 0 && config !== undefined ? <span>{status}</span> : <SubathonDisplay config={config} subsThisStream={subsThisStream} subathonEndDate={subathonEndDate} timeLastAdded={timeLastAdded}></SubathonDisplay>}\n  </>\n}\n\nexport default App;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Marquee from \"react-fast-marquee\";\nimport calculateTextWidth from \"calculate-text-width\";\n\nfunction MarqueeWhenOverflowText(props) {\n  const text = props.children;\n  const [overflowing, setOverflowing] = useState(false);\n  const thisComponent = useRef(null);\n\n\n  useEffect(() => {\n    // âš  WARNING âš  - This needs adjusting every time the font changes\n    const length = calculateTextWidth(text, 'normal 800 25px sans-serif');\n    setOverflowing(length > thisComponent.current.offsetWidth)\n  }, [text]);\n\n  return <div ref={thisComponent}>\n    {overflowing ?\n      <><Marquee gradient={false} speed={40}>{text}&nbsp;-&nbsp;</Marquee></>\n      :\n      <>{text}</>}\n  </div>;\n}\n\nexport default MarqueeWhenOverflowText;","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Timer({ endDate, timeLastAdded }) {\n\n  const [recentlyAddedTime, setRecentlyAddedTime] = useState(false);\n  const [countdownString, setCountdownString] = useState(\"\");\n  const [lowTime, setLowTime] = useState(false);\n  const [criticalTime, setCriticalTime] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRecentlyAddedTime(new Date() - timeLastAdded <= 3000);\n      setLowTime(endDate - new Date() <= 1 * 60 * 60 * 1000) // 1 hour\n      setCriticalTime(endDate - new Date() <= 5 * 60 * 1000) // 5 minutes\n      setCountdownString(formatTime((new Date(endDate - new Date()) / 1000)))\n    }, 200);\n    return () => clearInterval(interval);\n  }, [endDate, timeLastAdded]);\n\n  if (recentlyAddedTime) {\n    return <RecentlyAddedTime>{countdownString}</RecentlyAddedTime>\n  }\n  else if (criticalTime) {\n    return <CriticalTime>{countdownString}</CriticalTime>\n  }\n  else if (lowTime) {\n    return <LowTime>{countdownString}</LowTime>\n  }\n  else {\n    return <Normal>{countdownString}</Normal>\n  }\n}\n\nconst formatTime = (totalSeconds) => {\n\n\n  const hours = Math.abs(parseInt(totalSeconds / 60 / 60)).toString().padStart(2, '0');\n  const minutes = Math.abs(parseInt(totalSeconds / 60 % 60)).toString().padStart(2, '0');\n  const seconds = Math.abs(parseInt(totalSeconds % 60)).toString().padStart(2, '0');\n  return `${totalSeconds < 0 ? \"-\" : \"\"}${hours}:${minutes}:${seconds}`;\n}\n\nconst RecentlyAddedTime = styled.span`\n  \n  animation: blinkRecentlyAdded step-end 0.3s infinite;\n\n  @keyframes blinkRecentlyAdded{\n    0% {\n      color: transparent;\n    }\n    50% {\n      color: green;\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\nconst LowTime = styled.span`\n  color: red;\n`;\n\nconst CriticalTime = styled.span`\n  \n  animation: blinkCritical step-end 0.6s infinite;\n\n  @keyframes blinkCritical{\n    0% {\n      color: transparent;\n    }\n    30% {\n      color: red;\n    }\n    70% {\n      color: red;\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\n\nconst Normal = styled.span`\n  color: black;\n`;\n\nexport default Timer;","import styled from \"styled-components\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport MarqueeWhenOverflowText from \"./MarqueeWhenOverflowText\";\nimport Timer from \"./Timer\";\n\nfunction SubathonDisplay({ config, subsThisStream, subathonEndDate, timeLastAdded }) {\n\n  const achievedGoal = () => {\n    const defaultReturnValue = [0, \"No goal achieved\"]\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] <= subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[sortedGoals.length - 1] : defaultReturnValue;\n  }\n\n  const currentGoal = () => {\n    const defaultReturnValue = [Infinity, \"All goals achieved\"]\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] > subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[0] : defaultReturnValue;\n  }\n\n  // const currentGoalPercentage = () => {\n  //   return Math.round(100 - (currentGoal()[0] - subsThisStream) / (currentGoal()[0] - achievedGoal()[0]) * 100);\n  // }\n\n  return (\n    <div className=\"App\">\n      <SubathonContainer>\n        <SubathonTop>\n          <SubathonText>\n            <span>{currentGoal()[0] - subsThisStream} subs needed for:</span>\n            <SubathonNextGoalText>\n              <MarqueeWhenOverflowText>\n                {currentGoal()[1]}\n              </MarqueeWhenOverflowText>\n            </SubathonNextGoalText>\n          </SubathonText>\n          <SubathonTimer>\n            <Timer endDate={subathonEndDate} timeLastAdded={timeLastAdded} />\n          </SubathonTimer>\n        </SubathonTop>\n        <SubathonProgress>\n          {/* label={currentGoalPercentage() + \"%\"} */}\n          <ProgressBar animated now={subsThisStream} min={achievedGoal()[0]} max={currentGoal()[0]} />\n          <ProgressLabels>\n            <span>{achievedGoal()[0]}</span>\n            <span>{subsThisStream}</span>\n            <span>{currentGoal()[0]}</span>\n          </ProgressLabels>\n        </SubathonProgress>\n      </SubathonContainer>\n\n    </div>\n  );\n}\n\nconst SubathonNextGoalText = styled.div`\n  font-weight: bold;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  text-align: left;\n  width: 100%;\n`;\n\nconst SubathonText = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 65%;\n  align-items: flex-start;\n`;\n\nconst SubathonTimer = styled.div`\n  font-size: 3rem;\n  width: 35%;\n`;\n\nconst SubathonTop = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonProgress = styled.div`\n  .progress-bar{\n    background-color: black;\n  }\n`;\n\nconst ProgressLabels = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  color: black;\n  background-color: grey;\n  width: 600px;\n  height: 150px;\n`;\n\nexport default SubathonDisplay;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}