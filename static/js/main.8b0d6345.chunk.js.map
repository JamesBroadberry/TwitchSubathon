{"version":3,"sources":["MarqueeWhenOverflowText.js","Timer.js","SubathonDisplay.js","App.js","index.js"],"names":["MarqueeWhenOverflowText","props","text","children","useState","overflowing","setOverflowing","thisComponent","useRef","useEffect","length","calculateTextWidth","current","offsetWidth","ref","gradient","speed","formatTime","totalSeconds","hours","Math","abs","parseInt","toString","padStart","minutes","seconds","RecentlyAddedTime","styled","span","LowTime","CriticalTime","Normal","Timer","endDate","timeLastAdded","recentlyAddedTime","setRecentlyAddedTime","countdownString","setCountdownString","lowTime","setLowTime","criticalTime","setCriticalTime","interval","setInterval","Date","clearInterval","SubathonNextGoalText","div","SubathonText","SubathonTimer","SubathonTop","SubathonProgress","ProgressLabels","SubathonContainer","SubathonDisplay","config","subsThisStream","now","initialMinutes","subathonEndDate","setSubathonEndDate","setTimeLastAdded","achievedGoal","sortedGoals","Object","entries","goals","sort","x","filter","currentGoal","defaultReturnValue","Infinity","addSubs","numberOfSubs","addSeconds","secondsPerSub","numberOfSeconds","getTime","className","ProgressBar","animated","min","max","style","textAlign","marginTop","onClick","marginLeft","App","status","setStatus","twitchUsername","secondsPerBit","secondsPerPenny","setSubsThisStream","socket","WebSocket","onopen","send","getRandomNickname","onerror","onclose","close","onmessage","data","startsWith","console","log","includes","messagePart","split","messageContent","substring","indexOf","error","floor","random","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b0d6345.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport Marquee from \"react-fast-marquee\";\nimport calculateTextWidth from \"calculate-text-width\";\n\nfunction MarqueeWhenOverflowText(props) {\n  const text = props.children;\n  const [overflowing, setOverflowing] = useState(false);\n  const thisComponent = useRef(null);\n\n\n  useEffect(() => {\n    // ⚠ WARNING ⚠ - This needs adjusting every time the font changes\n    const length = calculateTextWidth(text, 'normal 800 25px sans-serif');\n    setOverflowing(length > thisComponent.current.offsetWidth)\n  }, [text]);\n\n  return <div ref={thisComponent}>\n    {overflowing ?\n      <><Marquee gradient={false} speed={40}>{text}&nbsp;-&nbsp;</Marquee></>\n      :\n      <>{text}</>}\n  </div>;\n}\n\nexport default MarqueeWhenOverflowText;","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Timer({ endDate, timeLastAdded }) {\n\n  const [recentlyAddedTime, setRecentlyAddedTime] = useState(false);\n  const [countdownString, setCountdownString] = useState(\"\");\n  const [lowTime, setLowTime] = useState(false);\n  const [criticalTime, setCriticalTime] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRecentlyAddedTime(new Date() - timeLastAdded <= 3000);\n      setLowTime(endDate - new Date() <= 1 * 60 * 60 * 1000) // 1 hour\n      setCriticalTime(endDate - new Date() <= 5 * 60 * 1000) // 5 minutes\n      setCountdownString(formatTime((new Date(endDate - new Date()) / 1000)))\n    }, 200);\n    return () => clearInterval(interval);\n  }, [endDate, timeLastAdded]);\n\n  if (recentlyAddedTime) {\n    return <RecentlyAddedTime>{countdownString}</RecentlyAddedTime>\n  }\n  else if (criticalTime) {\n    return <CriticalTime>{countdownString}</CriticalTime>\n  }\n  else if (lowTime) {\n    return <LowTime>{countdownString}</LowTime>\n  }\n  else {\n    return <Normal>{countdownString}</Normal>\n  }\n}\n\nconst formatTime = (totalSeconds) => {\n\n\n  const hours = Math.abs(parseInt(totalSeconds / 60 / 60)).toString().padStart(2, '0');\n  const minutes = Math.abs(parseInt(totalSeconds / 60 % 60)).toString().padStart(2, '0');\n  const seconds = Math.abs(parseInt(totalSeconds % 60)).toString().padStart(2, '0');\n  return `${totalSeconds < 0 ? \"-\" : \"\"}${hours}:${minutes}:${seconds}`;\n}\n\nconst RecentlyAddedTime = styled.span`\n  \n  animation: blinkRecentlyAdded step-end 0.3s infinite;\n\n  @keyframes blinkRecentlyAdded{\n    0% {\n      color: transparent;\n    }\n    50% {\n      color: green;\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\nconst LowTime = styled.span`\n  color: red;\n`;\n\nconst CriticalTime = styled.span`\n  \n  animation: blinkCritical step-end 0.6s infinite;\n\n  @keyframes blinkCritical{\n    0% {\n      color: transparent;\n    }\n    30% {\n      color: red;\n    }\n    70% {\n      color: red;\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\n\nconst Normal = styled.span`\n  color: black;\n`;\n\nexport default Timer;","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport MarqueeWhenOverflowText from \"./MarqueeWhenOverflowText\";\nimport Timer from \"./Timer\";\n\nfunction SubathonDisplay({ config, subsThisStream }) {\n\n  const [subathonEndDate, setSubathonEndDate] = useState(new Date(Date.now() + config.initialMinutes * 60 * 1000));\n  const [timeLastAdded, setTimeLastAdded] = useState(new Date(0)); // Beginning of time\n\n  const achievedGoal = () => {\n    const defaultReturnValue = [0, \"No goal achieved\"]\n\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] <= subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[sortedGoals.length - 1] : defaultReturnValue;\n  }\n\n\n  const currentGoal = () => {\n    const defaultReturnValue = [Infinity, \"All goals achieved\"]\n\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] > subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[0] : defaultReturnValue;\n  }\n\n  // const currentGoalPercentage = () => {\n  //   return Math.round(100 - (currentGoal()[0] - subsThisStream) / (currentGoal()[0] - achievedGoal()[0]) * 100);\n  // }\n\n  const addSubs = (numberOfSubs) => {\n    //setSubsThisStream(subsThisStream + numberOfSubs);\n    addSeconds(numberOfSubs * config.secondsPerSub);\n  }\n\n  const addSeconds = (numberOfSeconds) => {\n    setTimeLastAdded(Date.now());\n    setSubathonEndDate(new Date(subathonEndDate.getTime() + numberOfSeconds * 1000));\n  }\n\n  return (\n    <div className=\"App\">\n      <SubathonContainer>\n        <SubathonTop>\n          <SubathonText>\n            <span>{currentGoal()[0] - subsThisStream} subs needed for:</span>\n            <SubathonNextGoalText>\n              <MarqueeWhenOverflowText>\n                {currentGoal()[1]}\n              </MarqueeWhenOverflowText>\n            </SubathonNextGoalText>\n          </SubathonText>\n          <SubathonTimer>\n            <Timer endDate={subathonEndDate} timeLastAdded={timeLastAdded} />\n          </SubathonTimer>\n        </SubathonTop>\n        <SubathonProgress>\n          {/* label={currentGoalPercentage() + \"%\"} */}\n          <ProgressBar animated now={subsThisStream} min={achievedGoal()[0]} max={currentGoal()[0]} />\n          <ProgressLabels>\n            <span>{achievedGoal()[0]}</span>\n            <span>{subsThisStream}</span>\n            <span>{currentGoal()[0]}</span>\n          </ProgressLabels>\n        </SubathonProgress>\n      </SubathonContainer>\n      {/* Testing buttons - to be removed */}\n      <div style={{ textAlign: \"center\" }}>\n        <button style={{ marginTop: 10 }} onClick={() => addSubs(1)}>Add sub</button>\n        <button style={{ marginLeft: 10 }} onClick={() => addSubs(10)}>Add 10 subs</button>\n        <br />\n        <button style={{ marginTop: 10 }} onClick={() => addSubs(-1)}>Remove sub</button>\n        <button style={{ marginLeft: 10 }} onClick={() => addSubs(-10)}>Remove 10 subs</button>\n      </div>\n    </div>\n  );\n}\n\nconst SubathonNextGoalText = styled.div`\n  font-weight: bold;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  text-align: left;\n  width: 100%;\n`;\n\nconst SubathonText = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 65%;\n  align-items: flex-start;\n`;\n\nconst SubathonTimer = styled.div`\n  font-size: 3rem;\n  width: 35%;\n`;\n\nconst SubathonTop = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonProgress = styled.div`\n  .progress-bar{\n    background-color: black;\n  }\n`;\n\nconst ProgressLabels = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  color: black;\n  background-color: grey;\n  width: 600px;\n  height: 150px;\n  margin: auto;\n  margin-top: 1rem;\n`;\n\nexport default SubathonDisplay;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport SubathonDisplay from \"./SubathonDisplay\";\n\nfunction App() {\n\n  const [status, setStatus] = useState(\"Loading...\");\n\n  const [config] = useState({\n    goals: {\n      10: \"Do a thing\",\n      25: \"Do another thing\",\n      50: \"Do the last thing\"\n    },\n    twitchUsername: \"twitchusergoeshere\",\n    initialMinutes: 60,\n    secondsPerSub: 10 * 60,\n    secondsPerBit: 60 / 100,\n    secondsPerPenny: 60 / 100\n  });\n\n  const [subsThisStream, setSubsThisStream] = useState(0);\n\n  const socket = useRef(null);\n\n  useEffect(() => {\n    socket.current = new WebSocket(\"wss://irc-ws.chat.twitch.tv/\");\n\n    socket.current.onopen = () => {\n      setStatus(\"Connecting...\");\n      // \"Login\" with anonymous username\n      socket.current.send(\"NICK \" + getRandomNickname());\n\n      setStatus(\"Joining Twitch chat...\");\n      // Join the Twitch chat of the requested user\n      socket.current.send(\"JOIN #\" + config.twitchUsername);\n\n      setStatus(\"\");\n    };\n\n    socket.current.onerror = () => {\n      setStatus(\"🛑 Connection to Twitch Chat Error 🛑\");\n    }\n\n    socket.current.onclose = () => {\n      setStatus(\"🛑 Connection to Twitch Closed 🛑\");\n    }\n\n    // Specify how to clean up after this effect:\n    return () => {\n      socket.current.close();\n    };\n  }, [config]);\n\n  useEffect(() => {\n\n    if (!socket.current) return;\n\n    socket.current.onmessage = ({ data }) => {\n      // Need to handle \"PING\" messages to keep the socket connection alive\n      if (data.startsWith(\"PING :tmi.twitch.tv\")) {\n        console.log(\"Received a PING, sending back PONG\");\n        socket.current.send(\"PONG :tmi.twitch.tv\");\n        return;\n      }\n      // These are the messages sent by chatters - we need to process these\n      else if (data.includes(\"PRIVMSG\")) {\n        const messagePart = data.split(\"#\")[1];\n        const messageContent = messagePart\n          .substring(messagePart.indexOf(\":\") + 1)\n          .split(\"\\r\\n\")[0];\n        const username = data.split(\"@\")[1].split(\".tmi.twitch.tv\")[0];\n\n        switch (username) {\n          case config.twitchUsername:\n            if (messageContent === \"test\") {\n              setSubsThisStream(subsThisStream + 1)\n            }\n\n            break;\n          case \"streamelements\":\n\n            break;\n          default:\n            break;\n\n        }\n\n        return;\n      }\n      // Some common messages sent when first connecting that we don't care about\n      else if (\n        data.includes(\"Welcome\") ||\n        data.includes(\"JOIN\") ||\n        data.includes(\"NAMES\")\n      ) {\n        console.log(\"Received a known, ignored, message\", data);\n      }\n      // Log everything else as error to the console\n      else {\n        console.error(\"Unhandled message\", data);\n        return;\n      }\n\n    };\n\n\n  });\n\n\n\n\n  const getRandomNickname = () => {\n    // Anonymous access to Twitch via websockets is available using username \"justinfan\" followed by a random number\n    const min = 9999;\n    const max = 99999;\n    const randomNumber = Math.floor(Math.random() * (max - min)) + min;\n    return \"justinfan\" + randomNumber;\n  };\n\n  return <>\n    {status.length > 0 && config !== undefined ? <span>{status}</span> : <SubathonDisplay config={config} subsThisStream={subsThisStream}></SubathonDisplay>}\n  </>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}