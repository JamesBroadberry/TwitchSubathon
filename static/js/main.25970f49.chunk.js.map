{"version":3,"sources":["App.js","MarqueeWhenOverflowText.js","Timer.js","SubathonDisplay.js","index.js"],"names":["App","useState","status","setStatus","goals","twitchUsername","initialMinutes","secondsPerPrimeSub","secondsPerTier1Sub","secondsPerTier2Sub","secondsPerTier3Sub","secondsPerBit","secondsPerPenny","config","setConfig","useEffect","configQuery","URLSearchParams","window","location","search","get","configDecoded","Buffer","from","jsonConfig","JSON","parse","subsThisStream","setSubsThisStream","totalTimeAddedThisStream","setTotalTimeAddedThisStream","Date","now","subathonEndDate","setSubathonEndDate","timeLastAdded","setTimeLastAdded","addSubs","numberOfSubs","addSeconds","numberOfSeconds","getTime","socket","useRef","current","WebSocket","onopen","send","getRandomNickname","onerror","onclose","close","onmessage","data","startsWith","console","log","includes","messagePart","split","messageContent","substring","indexOf","subathonResetMatch","match","addSubsMatch","addMinutesMatch","numberOfSubsToAdd","parseInt","bitsMatch","donationMatch","personalSubscriptionMatch","giftedSubscriptionMatch","numberOfBits","numberOfPennies","parseFloat","numberOfGiftedSubs","error","Math","floor","random","className","length","undefined","MarqueeWhenOverflowText","props","text","children","overflowing","setOverflowing","thisComponent","calculateTextWidth","offsetWidth","ref","gradient","speed","formatTime","totalSeconds","hours","abs","toString","padStart","minutes","seconds","RecentlyAddedTime","styled","span","LowTime","CriticalTime","Normal","Timer","endDate","recentlyAddedTime","setRecentlyAddedTime","countdownString","setCountdownString","lowTime","setLowTime","criticalTime","setCriticalTime","interval","setInterval","clearInterval","SubathonNextGoalText","div","SubathonText","SubathonTimer","SubathonTop","SubathonProgress","ProgressLabels","SubathonContainer","SubathonDisplay","achievedGoal","sortedGoals","Object","entries","sort","x","filter","currentGoal","defaultReturnValue","Infinity","ProgressBar","animated","min","max","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25970f49.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport SubathonDisplay from \"./SubathonDisplay\";\n\nfunction App() {\n\n  const [status, setStatus] = useState(\"Loading...\");\n\n  const [config, setConfig] = useState({\n    goals: {},\n    twitchUsername: \"\",\n    initialMinutes: 0,\n    secondsPerPrimeSub: 0,\n    secondsPerTier1Sub: 0,\n    secondsPerTier2Sub: 0,\n    secondsPerTier3Sub: 0,\n    secondsPerBit: 0,\n    secondsPerPenny: 0\n  });\n\n  useEffect(() => {\n    const query = new URLSearchParams(window.location.search);\n    const configQuery = query.get('config')\n    const configDecoded = Buffer.from(configQuery, \"base64\");\n    const jsonConfig = JSON.parse(configDecoded);\n    setConfig(jsonConfig);\n  }, []);\n\n  const [subsThisStream, setSubsThisStream] = useState(0);\n  const [totalTimeAddedThisStream, setTotalTimeAddedThisStream] = useState(0);\n  const [subathonEndDate, setSubathonEndDate] = useState(new Date(Date.now() + config.initialMinutes * 60 * 1000));\n  const [timeLastAdded, setTimeLastAdded] = useState(new Date(0)); // Beginning of time\n\n  const addSubs = (numberOfSubs) => {\n    setSubsThisStream(subsThisStream + numberOfSubs);\n  }\n\n  const addSeconds = (numberOfSeconds) => {\n    if (numberOfSeconds > 0) {\n      setTimeLastAdded(Date.now());\n    }\n    setSubathonEndDate(new Date(subathonEndDate.getTime() + numberOfSeconds * 1000));\n    setTotalTimeAddedThisStream(totalTimeAddedThisStream + numberOfSeconds);\n  }\n\n  useEffect(() => {\n    setSubathonEndDate(new Date((Date.now() + config.initialMinutes * 60 * 1000) + (totalTimeAddedThisStream * 1000)));\n    // eslint-disable-next-line\n  }, [config]);\n\n  const socket = useRef(null);\n\n  useEffect(() => {\n    socket.current = new WebSocket(\"wss://irc-ws.chat.twitch.tv/\");\n\n    socket.current.onopen = () => {\n      setStatus(\"Connecting...\");\n      // \"Login\" with anonymous username\n      socket.current.send(\"NICK \" + getRandomNickname());\n\n      setStatus(\"Joining Twitch chat...\");\n      // Join the Twitch chat of the requested user\n      socket.current.send(\"JOIN #\" + config.twitchUsername);\n\n      setStatus(\"\");\n    };\n\n    socket.current.onerror = () => {\n      setStatus(\"ðŸ›‘ Connection to Twitch Chat Error ðŸ›‘\");\n    }\n\n    socket.current.onclose = () => {\n      setStatus(\"ðŸ›‘ Connection to Twitch Closed ðŸ›‘\");\n    }\n\n    // Specify how to clean up after this effect:\n    return () => {\n      socket.current.close();\n    };\n  }, [config]);\n\n  useEffect(() => {\n\n    if (!socket.current) return;\n\n    socket.current.onmessage = ({ data }) => {\n      // Need to handle \"PING\" messages to keep the socket connection alive\n      if (data.startsWith(\"PING :tmi.twitch.tv\")) {\n        console.log(\"Received a PING, sending back PONG\");\n        socket.current.send(\"PONG :tmi.twitch.tv\");\n        return;\n      }\n      // These are the messages sent by chatters - we need to process these\n      else if (data.includes(\"PRIVMSG\")) {\n        const messagePart = data.split(\"#\")[1];\n        const messageContent = messagePart\n          .substring(messagePart.indexOf(\":\") + 1)\n          .split(\"\\r\\n\")[0];\n        const username = data.split(\"@\")[1].split(\".tmi.twitch.tv\")[0];\n\n        switch (username) {\n          case \"jimib95\":\n          case config.twitchUsername:\n            const subathonResetMatch = messageContent.match(/!subathonreset/i);\n            const addSubsMatch = messageContent.match(/!addsubs (-?\\d+)/i);\n            const addMinutesMatch = messageContent.match(/!addminutes (-?\\d+)/i);\n            if (subathonResetMatch) {\n              setConfig({ ...config })\n            }\n            if (addSubsMatch) {\n              const numberOfSubsToAdd = parseInt(addSubsMatch[1]);\n              addSubs(numberOfSubsToAdd);\n              addSeconds(numberOfSubsToAdd * config.secondsPerPrimeSub);\n            }\n            if (addMinutesMatch) {\n              addSeconds(parseInt(addMinutesMatch[1] * 60));\n            }\n            break;\n          case \"streamlabs\":\n            const bitsMatch = messageContent.match(/has cheered (\\d+) bits/i);\n            const donationMatch = messageContent.match(/just tipped \\$(.*)!/i)\n            const personalSubscriptionMatch = messageContent.match(/just subscribed with (.*)!/i);\n            const giftedSubscriptionMatch = messageContent.match(/just gifted (\\d+) (.*) subscriptions!/i);\n            if (bitsMatch) {\n              const numberOfBits = parseInt(bitsMatch[1]);\n              addSeconds(numberOfBits * config.secondsPerBit);\n            }\n            if (donationMatch) {\n              const numberOfPennies = parseFloat(donationMatch[1]) * 100;\n              addSeconds(numberOfPennies * config.secondsPerPenny);\n            }\n            if (personalSubscriptionMatch) {\n              addSubs(1);\n\n              const subscriptionType = personalSubscriptionMatch[1];\n              switch (subscriptionType) {\n                case \"Twitch Prime\":\n                  addSeconds(config.secondsPerPrimeSub);\n                  break;\n                case \"Tier 1\":\n                  addSeconds(config.secondsPerTier1Sub);\n                  break;\n                case \"Tier 2\":\n                  addSeconds(config.secondsPerTier2Sub);\n                  break;\n                case \"Tier 3\":\n                  addSeconds(config.secondsPerTier3Sub);\n                  break;\n                default:\n                  break;\n              }\n            }\n            if (giftedSubscriptionMatch) {\n              const numberOfGiftedSubs = parseInt(giftedSubscriptionMatch[1]);\n              addSubs(numberOfGiftedSubs);\n\n              const subscriptionType = giftedSubscriptionMatch[2];\n              switch (subscriptionType) {\n                case \"Twitch Prime\":\n                  addSeconds(numberOfGiftedSubs * config.secondsPerPrimeSub);\n                  break;\n                case \"Tier 1\":\n                  addSeconds(numberOfGiftedSubs * config.secondsPerTier1Sub);\n                  break;\n                case \"Tier 2\":\n                  addSeconds(numberOfGiftedSubs * config.secondsPerTier2Sub);\n                  break;\n                case \"Tier 3\":\n                  addSeconds(numberOfGiftedSubs * config.secondsPerTier3Sub);\n                  break;\n                default:\n                  break;\n              }\n            }\n            break;\n          default:\n            break;\n        }\n\n        return;\n      }\n      // Some common messages sent when first connecting that we don't care about\n      else if (\n        data.includes(\"Welcome\") ||\n        data.includes(\"JOIN\") ||\n        data.includes(\"NAMES\")\n      ) {\n        console.log(\"Received a known, ignored, message\", data);\n      }\n      // Log everything else as error to the console\n      else {\n        console.error(\"Unhandled message\", data);\n        return;\n      }\n    };\n  });\n\n\n\n\n  const getRandomNickname = () => {\n    // Anonymous access to Twitch via websockets is available using username \"justinfan\" followed by a random number\n    const min = 9999;\n    const max = 99999;\n    const randomNumber = Math.floor(Math.random() * (max - min)) + min;\n    return \"justinfan\" + randomNumber;\n  };\n\n  return <>\n\n    <div className=\"App\">\n      {status.length > 0 && config !== undefined ? <span>{status}</span> : <SubathonDisplay config={config} subsThisStream={subsThisStream} subathonEndDate={subathonEndDate} timeLastAdded={timeLastAdded}></SubathonDisplay>}\n    </div>\n  </>\n}\n\nexport default App;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Marquee from \"react-fast-marquee\";\nimport calculateTextWidth from \"calculate-text-width\";\n\nfunction MarqueeWhenOverflowText(props) {\n  const text = props.children;\n  const [overflowing, setOverflowing] = useState(false);\n  const thisComponent = useRef(null);\n\n\n  useEffect(() => {\n    // âš  WARNING âš  - This needs adjusting every time the font changes\n    const length = calculateTextWidth(text, 'normal 800 25px sans-serif');\n    setOverflowing(length > thisComponent.current.offsetWidth)\n  }, [text]);\n\n  return <div ref={thisComponent}>\n    {overflowing ?\n      <><Marquee gradient={false} speed={40}>{text}&nbsp;-&nbsp;</Marquee></>\n      :\n      <>{text}</>}\n  </div>;\n}\n\nexport default MarqueeWhenOverflowText;","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Timer({ endDate, timeLastAdded }) {\n\n  const [recentlyAddedTime, setRecentlyAddedTime] = useState(false);\n  const [countdownString, setCountdownString] = useState(\"\");\n  const [lowTime, setLowTime] = useState(false);\n  const [criticalTime, setCriticalTime] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRecentlyAddedTime(new Date() - timeLastAdded <= 3000);\n      setLowTime(endDate - new Date() <= 1 * 60 * 60 * 1000) // 1 hour\n      setCriticalTime(endDate - new Date() <= 5 * 60 * 1000) // 5 minutes\n      setCountdownString(formatTime((new Date(endDate - new Date()) / 1000)))\n    }, 200);\n    return () => clearInterval(interval);\n  }, [endDate, timeLastAdded]);\n\n  if (recentlyAddedTime) {\n    return <RecentlyAddedTime>{countdownString}</RecentlyAddedTime>\n  }\n  else if (criticalTime) {\n    return <CriticalTime>{countdownString}</CriticalTime>\n  }\n  else if (lowTime) {\n    return <LowTime>{countdownString}</LowTime>\n  }\n  else {\n    return <Normal>{countdownString}</Normal>\n  }\n}\n\nconst formatTime = (totalSeconds) => {\n\n\n  const hours = Math.abs(parseInt(totalSeconds / 60 / 60)).toString().padStart(2, '0');\n  const minutes = Math.abs(parseInt(totalSeconds / 60 % 60)).toString().padStart(2, '0');\n  const seconds = Math.abs(parseInt(totalSeconds % 60)).toString().padStart(2, '0');\n  return `${totalSeconds < 0 ? \"-\" : \"\"}${hours}:${minutes}:${seconds}`;\n}\n\nconst RecentlyAddedTime = styled.span`\n  \n  animation: blinkRecentlyAdded step-end 0.3s infinite;\n\n  @keyframes blinkRecentlyAdded{\n    0% {\n      color: transparent;\n    }\n    50% {\n      color: var(--subathon-addedtime);\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\nconst LowTime = styled.span`\n  color: var(--subathon-lowtime);\n`;\n\nconst CriticalTime = styled.span`\n  \n  animation: blinkCritical step-end 0.6s infinite;\n\n  @keyframes blinkCritical{\n    0% {\n      color: transparent;\n    }\n    30% {\n      color: var(--subathon-criticaltime);\n    }\n    70% {\n      color: var(--subathon-criticaltime);\n    }\n    100% {\n      color: transparent;\n    }\n  }\n`;\n\n\nconst Normal = styled.span`\n`;\n\nexport default Timer;","import styled from \"styled-components\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport MarqueeWhenOverflowText from \"./MarqueeWhenOverflowText\";\nimport Timer from \"./Timer\";\n\nfunction SubathonDisplay({ config, subsThisStream, subathonEndDate, timeLastAdded }) {\n\n  const achievedGoal = () => {\n    const defaultReturnValue = [0, \"No goal achieved\"]\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] <= subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[sortedGoals.length - 1] : defaultReturnValue;\n  }\n\n  const currentGoal = () => {\n    const defaultReturnValue = [Infinity, \"All goals achieved\"]\n    const sortedGoals = Object.entries(config.goals).sort(x => x[0]).filter(x => x[0] > subsThisStream);\n    return sortedGoals.length > 0 ? sortedGoals[0] : defaultReturnValue;\n  }\n\n  // const currentGoalPercentage = () => {\n  //   return Math.round(100 - (currentGoal()[0] - subsThisStream) / (currentGoal()[0] - achievedGoal()[0]) * 100);\n  // }\n\n  return (\n    <SubathonContainer className=\"SubathonContainer\">\n      <SubathonTop>\n        <SubathonText>\n          <span>{currentGoal()[0] - subsThisStream} subs needed for:</span>\n          <SubathonNextGoalText>\n            <MarqueeWhenOverflowText>\n              {currentGoal()[1]}\n            </MarqueeWhenOverflowText>\n          </SubathonNextGoalText>\n        </SubathonText>\n        <SubathonTimer>\n          <Timer endDate={subathonEndDate} timeLastAdded={timeLastAdded} />\n        </SubathonTimer>\n      </SubathonTop>\n      <SubathonProgress>\n        {/* label={currentGoalPercentage() + \"%\"} */}\n        <ProgressBar animated now={subsThisStream} min={achievedGoal()[0]} max={currentGoal()[0]} />\n        <ProgressLabels>\n          <span>{achievedGoal()[0]}</span>\n          <span>{subsThisStream}</span>\n          <span>{currentGoal()[0]}</span>\n        </ProgressLabels>\n      </SubathonProgress>\n    </SubathonContainer>\n  );\n}\n\nconst SubathonNextGoalText = styled.div`\n  font-weight: bold;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  text-align: left;\n  width: 100%;\n`;\n\nconst SubathonText = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 65%;\n  align-items: flex-start;\n`;\n\nconst SubathonTimer = styled.div`\n  font-size: 3rem;\n  width: 35%;\n`;\n\nconst SubathonTop = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonProgress = styled.div`\n  .progress-bar{\n    background-color: var(--subathon-progressbarcolor);\n  }\n`;\n\nconst ProgressLabels = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SubathonContainer = styled.div`\n  --subathon-criticaltime: #FF4136;\n  --subathon-lowtime: #FF4136;\n  --subathon-addedtime: #2ECC40;\n  --subathon-textcolor: white;\n  --subathon-progressbarcolor: #001f3f;\n  --subathon-background: linear-gradient(77deg, rgb(28,33,43) 0%, rgb(28,44,52) 50%, rgb(28,36,52) 100%);\n\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0.5rem;\n  font-size: 1.5rem;\n  color: var(--subathon-textcolor);\n  background: var(--subathon-background);\n  width: 600px;\n  height: 150px;\n`;\n\nexport default SubathonDisplay;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}